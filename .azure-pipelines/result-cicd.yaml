# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - refs/pull/*
  paths:
    include:
    - result/*
    - .azure-pipelines/result-cicd.yaml
    - manifests/result.yaml
    
resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'fd784926-9618-4285-aa52-4ee8de2a2085'
  imageRepository: 'gevergheresultappkubernetes'
  containerRegistry: 'forresterdemo.azurecr.io'
  dockerfilePath: 'result/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'forresterdemosecret'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: result/helm
      artifact: result/helm

- stage: ReviewApp
  displayName: deploy Pull Request
  dependsOn: Build

  jobs:
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)      
    environment: 'geverghevotingappkubernetes.$(k8sNamespaceForPR)' 
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: contoso-aks

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/result/helm
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build  

  jobs:
  - deployment: Deploy
    displayName: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    pool:
      vmImage: $(vmImageName)
    environment: 'geverghevotingappkubernetes.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/result/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: $(bake.manifestsBundle)
              strategy: canary
              trafficSplitMethod: smi
              percentage: 20
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)