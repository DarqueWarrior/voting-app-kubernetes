# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - result/*
    - .azure-pipelines/result-cicd.yaml
    - manifests/result.yaml
    
resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '621a834f-49c3-4f4e-a151-fa59b0924954'
  imageRepository: 'gevergheresultappkubernetes'
  containerRegistry: 'forresterdemo.azurecr.io'
  dockerfilePath: 'result/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'forresterdemosecret'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Variables for webapp
  azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
  appName: 'welcometogithubazure'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: result/helm
      artifact: result/helm

  - job: Test
    dependsOn: Build
    displayName: Run tests
    variables: { agent.disablelogplugin.TestResultLogPlugin: 'false' }
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PublishTestResults@2
      displayName: 'Publish Test Results test-all.trx'
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        mergeTestResults: true
    - task: ContainerStructureTest@0
      displayName: 'Container Structure Test '
      inputs:
        dockerRegistryServiceConnection: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        tag: '$(tag)'
        configFile: tests/FileExistenceTest.yml
        testRunTitle: 'File Existence test'
        failTaskOnFailedTests: false

- stage: DeployCanary
  displayName: Deploy Canary
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Stage.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/result/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: $(bake.manifestsBundle)
              strategy: canary
              trafficSplitMethod: smi
              percentage: 20
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployProductionAKS
  displayName: Deploy to Production.contoso-aks
  dependsOn: DeployCanary

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Production.contoso-aks'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/result/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: $(bake.manifestsBundle)             
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployProductionGKE
  displayName: Deploy to Production.GKE
  dependsOn: DeployCanary

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Production.contoso-gke'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/result/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy              
              manifests: $(bake.manifestsBundle)             
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployProductionAzureWebApp
  displayName: Deploy to Production.WebApp
  dependsOn: DeployCanary
  pool:
    vmImage: $(vmImageName)

  jobs:
  - job: DeploytoAzureWebApp

    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: $(containerRegistry)/$(imageRepository):$(tag)