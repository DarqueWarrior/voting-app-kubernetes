# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - refs/pull/*
  paths:
    include:
    - worker/*
    - .azure-pipelines/worker-cicd.yaml
    - manifests/worker.yaml

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: N-Usha/voting-app-ci-templates
    endpoint: github.com_N-Usha

variables:
#- group: VoterAppSecrets  

- name: dockerRegistryServiceConnection 
  value: '621a834f-49c3-4f4e-a151-fa59b0924954'
- name: imageRepository 
  value: 'gevergheworkerappkubernetes'
- name: containerRegistry 
  value: 'forresterdemo.azurecr.io'
- name: dockerfilePath 
  value: 'worker/Dockerfile'
- name: tag 
  value: '$(Build.BuildId)'
- name: imagePullSecret 
  value: 'forresterdemosecret'
- name: azure-storage-secret 
  value: 'azure-storage'
- name: azure-sql-secret 
  value: 'azure-sql'
- name: k8sNamespaceForPR 
  value: '$(system.pullRequest.sourceBranch)'

  # Agent VM image name
- name: vmImageName 
  value: 'ubuntu-latest'


stages:
- stage: Infrastructure
  displayName: Create or Update Infra
  jobs:    
  - job: createAKSACR
    displayName: Create Or Update AKS - ForresterDemoCluster and ACR - ForresterDemo     
    steps:    
    - task: AzureKeyVault@1
      displayName: Fetch Storage Secrets from Azure Key vault
      inputs:
        azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        KeyVaultName: 'ForresterDemoKeyVault'
        SecretsFilter: '*'
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        subscriptionId: 'afc11291-9826-46be-b852-70349146ddf8'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/aks.json'
        overrideParameters: |
         -clusterName "ForresterDemoCluster" -dnsPrefix "forresterdemocluster-dns" -linuxAdminUsername "MC_ForresterDemoCluster_ForresterDemo_EastUS" -sshRSAPublicKey "$(aks-arm-sshrsa-new)" -servicePrincipalClientId "$(aks-arm-sp-client-id)" -servicePrincipalClientSecret "$(aks-arm-sp-client-password)"
        deploymentMode: 'Incremental'
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        subscriptionId: 'afc11291-9826-46be-b852-70349146ddf8'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/acr.json'
        overrideParameters: -acrName "ForresterDemo" -acrSku "Premium"
        deploymentMode: 'Incremental'

- stage: Build
  displayName: Build stage
  dependsOn: Infrastructure
  jobs:  
  - template: buildJob.yml@templates
    parameters:
      name: 'worker'
      vmImageName: $(vmImageName)
      imageRepository: $(imageRepository)
      dockerfilePath: $(dockerfilePath)
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
      tag: $(tag)

- stage: ReviewApp
  displayName: Deploy Pull Request
  dependsOn: Build
  jobs:
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)      
    environment: 'Development.$(k8sNamespaceForPR)' 
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: contoso-dev-aks-east

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: '$(k8sNamespaceForPR)'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureKeyVault@1
            displayName: Fetch Storage Secrets from Azure Key vault
            inputs:
              azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
              KeyVaultName: 'ForresterDemoKeyVault'
              SecretsFilter: '*'

          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'Development-contoso-dev-aks-east-1582910004962'
              namespace: '$(k8sNamespaceForPR)'

          - task: KubernetesManifest@0
            displayName: Create SQL secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-sql-secret)
              secretArguments: --from-literal=sql-hostname=$(azure-sql-hostname) --from-literal=sql-username=$(azure-sql-rw-username) --from-literal=sql-password=$(azure-sql-rw-password)
              kubernetesServiceConnection: 'Development-contoso-dev-aks-east-1582910004962'
              namespace: '$(k8sNamespaceForPR)'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/worker/helm
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployToQA
  displayName: Deploy to QA
  dependsOn: ReviewApp
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'QA.contoso-qa-aks-east'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: "contoso-qa-aks-east"
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureKeyVault@1
            displayName: Fetch Storage Secrets from Azure Key vault
            inputs:
              azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
              KeyVaultName: 'ForresterDemoKeyVault'
              SecretsFilter: '*'

          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-qa-username) --from-literal=access-key=$(azure-storage-qa-key)
              kubernetesServiceConnection: 'QA-contoso-qa-aks-east-1582910270398'
              namespace: "contoso-qa-aks-east"

          - task: KubernetesManifest@0
            displayName: Create SQL secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-sql-secret)
              secretArguments: --from-literal=sql-hostname=$(azure-sql-hostname) --from-literal=sql-username=$(azure-sql-rw-username) --from-literal=sql-password=$(azure-sql-rw-password)
              kubernetesServiceConnection: 'QA-contoso-qa-aks-east-1582910270398'
              namespace: 'contoso-qa-aks-east'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/worker/helm

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: "contoso-qa-aks-east"
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployProdAKS
  displayName: Deploy to Production AKS
  dependsOn: DeployToQA

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Production.contoso-prod-aks-east'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: 'contoso-prod-aks-east'
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureKeyVault@1
            displayName: Fetch Storage Secrets from Azure Key vault
            inputs:
              azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
              KeyVaultName: 'ForresterDemoKeyVault'
              SecretsFilter: '*'
          
          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'Production-contoso-prod-aks-east-1582910441191'
              namespace: 'contoso-prod-aks-east'

          - task: KubernetesManifest@0
            displayName: Create SQL secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-sql-secret)
              secretArguments: --from-literal=sql-hostname=$(azure-sql-hostname) --from-literal=sql-username=$(azure-sql-rw-username) --from-literal=sql-password=$(azure-sql-rw-password)
              kubernetesServiceConnection: 'Production-contoso-prod-aks-east-1582910441191'
              namespace: 'contoso-prod-aks-east'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/worker/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: $(bake.manifestsBundle)
              namespace: 'contoso-prod-aks-east'           
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
                
- stage: DeployProdGKE
  displayName: Deploy to Production GKE 
  dependsOn: DeployToQA  

  jobs:
  - deployment: Deploy
    displayName: Deploy    
    pool:
      vmImage: $(vmImageName)
    environment: 'Production.contoso-prod-gke'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: 'contoso-prod-gke'
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureKeyVault@1
            displayName: Fetch Storage Secrets from Azure Key vault
            inputs:
              azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
              KeyVaultName: 'ForresterDemoKeyVault'
              SecretsFilter: '*'
          
          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'Production-contoso-prod-gke-1582202369145'
              namespace: 'contoso-prod-gke'

          - task: KubernetesManifest@0
            displayName: Create SQL secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-sql-secret)
              secretArguments: --from-literal=sql-hostname=$(azure-sql-hostname) --from-literal=sql-username=$(azure-sql-rw-username) --from-literal=sql-password=$(azure-sql-rw-password)
              kubernetesServiceConnection: 'Production-contoso-prod-gke-1582202369145'
              namespace: 'contoso-prod-gke'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/worker/helm
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: $(bake.manifestsBundle)
              namespace: 'contoso-prod-gke'           
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
                
